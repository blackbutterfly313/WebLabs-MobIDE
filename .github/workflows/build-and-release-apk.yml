name: Build and Release APK

on:
  push:
    branches: [ main, develop ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    name: Build APK
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Build Debug APK
      run: ./gradlew assembleDebug
      
    - name: Build Release APK (if main branch or tag)
      if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
      run: ./gradlew assembleRelease
      
    - name: Sign Release APK (if main branch or tag)
      if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
      uses: r0adkll/sign-android-release@v1
      id: sign_app
      with:
        releaseDirectory: app/build/outputs/apk/release
        signingKeyBase64: ${{ secrets.SIGNING_KEY }}
        alias: ${{ secrets.ALIAS }}
        keyStorePassword: ${{ secrets.KEY_STORE_PASSWORD }}
        keyPassword: ${{ secrets.KEY_PASSWORD }}
      env:
        BUILD_TOOLS_VERSION: "34.0.0"
        
    - name: Get version name
      id: version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        else
          echo "VERSION=$(git describe --tags --always --dirty)" >> $GITHUB_OUTPUT
        fi
        
    - name: Rename APK files
      run: |
        mkdir -p dist
        if [ -f "app/build/outputs/apk/debug/app-debug.apk" ]; then
          cp app/build/outputs/apk/debug/app-debug.apk dist/WebLabs-MobIDE-${{ steps.version.outputs.VERSION }}-debug.apk
        fi
        if [ -f "app/build/outputs/apk/release/app-release-unsigned.apk" ]; then
          cp app/build/outputs/apk/release/app-release-unsigned.apk dist/WebLabs-MobIDE-${{ steps.version.outputs.VERSION }}-release-unsigned.apk
        fi
        if [ -f "${{steps.sign_app.outputs.signedReleaseFile}}" ]; then
          cp "${{steps.sign_app.outputs.signedReleaseFile}}" dist/WebLabs-MobIDE-${{ steps.version.outputs.VERSION }}-release-signed.apk
        fi
        
    - name: Upload Debug APK
      uses: actions/upload-artifact@v4
      with:
        name: WebLabs-MobIDE-Debug-APK
        path: dist/*debug.apk
        retention-days: 30
        
    - name: Upload Release APK
      if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
      uses: actions/upload-artifact@v4
      with:
        name: WebLabs-MobIDE-Release-APK
        path: dist/*release*.apk
        retention-days: 90
        
    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          dist/*.apk
        draft: false
        prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
        generate_release_notes: true
        body: |
          ## WebLabs MobIDE ${{ steps.version.outputs.VERSION }}
          
          ### üì± Android APK with Alpine Linux ARM64 Shell-IDE
          
          **Production-ready mobile development environment for Android devices:**
          
          #### üèîÔ∏è Features:
          - **Alpine Linux 3.22.1 ARM64** development environment
          - **Real shell and terminal** with full Linux command support
          - **AI-assisted development** with code generation and refactoring
          - **Mobile-first design** optimized for Android devices
          - **ARM64/AArch64 native compilation** support
          - **Package management** (APK, NPM, PIP, Cargo)
          - **Git integration** for version control
          - **Professional development tools** and workspace
          
          #### üì¶ Download:
          - **WebLabs-MobIDE-${{ steps.version.outputs.VERSION }}-release-signed.apk** - Production release (recommended)
          - **WebLabs-MobIDE-${{ steps.version.outputs.VERSION }}-debug.apk** - Debug version for testing
          
          #### üõ†Ô∏è Installation:
          1. Download the APK file
          2. Enable "Install from unknown sources" in Android settings
          3. Install the APK
          4. Grant all required permissions when prompted
          5. The app will automatically download Alpine Linux and setup the environment
          
          #### üìã Requirements:
          - Android 10+ (API 29+)
          - ARM64/AArch64 processor (most modern Android devices)
          - 2GB+ free storage space
          - Internet connection for initial setup
          
          **No examples - real production code for actual mobile development!**
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Run unit tests
      run: ./gradlew testDebugUnitTest
      
    - name: Run lint
      run: ./gradlew lintDebug
      
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          app/build/reports/
          app/build/test-results/