name: Build and Publish APK to GitHub Packages

# Configures this workflow to run every time a change is pushed to the branch called `main` or `release`
on:
  push:
    branches: ['main', 'release']
    tags:
      - 'v*'
  pull_request:
    branches: ['main']
  workflow_dispatch:

# Defines custom environment variables for the workflow
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

# Jobs for building APK and publishing to GitHub Packages
jobs:
  build-and-publish-apk:
    runs-on: ubuntu-latest
    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          
      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
            
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
        
      - name: Build Debug APK
        run: ./gradlew assembleDebug
        
      - name: Build Release APK (if main/release branch or tag)
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/release' || startsWith(github.ref, 'refs/tags/')
        run: ./gradlew assembleRelease
        
      - name: Get version info
        id: version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=$(git describe --tags --always --dirty)" >> $GITHUB_OUTPUT
          fi
          echo "BUILD_TIME=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT
          
      - name: Prepare APK artifacts
        run: |
          mkdir -p dist/packages
          
          # Copy debug APK
          if [ -f "app/build/outputs/apk/debug/app-debug.apk" ]; then
            cp app/build/outputs/apk/debug/app-debug.apk dist/packages/WebLabs-MobIDE-${{ steps.version.outputs.VERSION }}-debug.apk
          fi
          
          # Copy release APK
          if [ -f "app/build/outputs/apk/release/app-release-unsigned.apk" ]; then
            cp app/build/outputs/apk/release/app-release-unsigned.apk dist/packages/WebLabs-MobIDE-${{ steps.version.outputs.VERSION }}-release.apk
          fi
          
          # Create package metadata
          cat > dist/packages/package-info.json << EOF
          {
            "name": "WebLabs-MobIDE",
            "version": "${{ steps.version.outputs.VERSION }}",
            "description": "Alpine Linux ARM64 Mobile Development Environment for Android",
            "build_time": "${{ steps.version.outputs.BUILD_TIME }}",
            "commit": "${{ github.sha }}",
            "branch": "${{ github.ref_name }}",
            "platform": "Android ARM64",
            "features": [
              "Alpine Linux 3.22.1 ARM64",
              "Real shell and terminal",
              "AI-assisted development",
              "Mobile-first design",
              "ARM64/AArch64 native compilation",
              "Package management (APK, NPM, PIP, Cargo)",
              "Git integration",
              "Professional development tools"
            ]
          }
          EOF
          
      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: Create Dockerfile for APK distribution
        run: |
          cat > Dockerfile << 'EOF'
          FROM alpine:3.19
          
          # Install basic tools
          RUN apk add --no-cache \
              curl \
              wget \
              unzip \
              file \
              ca-certificates
          
          # Create app directory
          WORKDIR /app
          
          # Copy APK files and metadata
          COPY dist/packages/ /app/packages/
          
          # Create download script
          RUN cat > /app/download.sh << 'SCRIPT'
          #!/bin/sh
          echo "=== WebLabs-MobIDE APK Distribution ==="
          echo "Available APK packages:"
          ls -la /app/packages/*.apk 2>/dev/null || echo "No APK files available"
          echo ""
          echo "Package information:"
          cat /app/packages/package-info.json 2>/dev/null || echo "No package info available"
          echo ""
          echo "To download APKs, run:"
          echo "docker run --rm -v \$(pwd):/output ghcr.io/spiralgang/weblabs-mobide:latest cp -r /app/packages /output/"
          SCRIPT
          
          RUN chmod +x /app/download.sh
          
          # Set default command
          CMD ["/app/download.sh"]
          EOF
          
      - name: Build and push Docker image
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          
      - name: Upload APK artifacts to GitHub
        uses: actions/upload-artifact@v4
        with:
          name: WebLabs-MobIDE-APK-${{ steps.version.outputs.VERSION }}
          path: dist/packages/
          retention-days: 90
          
      - name: Create GitHub Release (if tag)
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/packages/*.apk
            dist/packages/package-info.json
          draft: false
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
          generate_release_notes: true
          body: |
            ## WebLabs MobIDE ${{ steps.version.outputs.VERSION }}
            
            ### üì± Android APK with Alpine Linux ARM64 Shell-IDE
            
            **Production-ready mobile development environment for Android devices**
            
            #### üöÄ Quick Install:
            ```bash
            # Download via Docker
            docker run --rm -v $(pwd):/output ghcr.io/spiralgang/weblabs-mobide:${{ steps.version.outputs.VERSION }} cp -r /app/packages /output/
            
            # Or download directly from GitHub Packages
            gh release download ${{ steps.version.outputs.VERSION }} --repo spiralgang/WebLabs-MobIDE
            ```
            
            #### üèîÔ∏è Features:
            - **Alpine Linux ARM64** development environment
            - **Real shell and terminal** with full Linux command support  
            - **AI-assisted development** with code generation
            - **Mobile-optimized** for Android ARM64 devices
            - **Package management** (APK, NPM, PIP, Cargo)
            - **Git integration** and professional dev tools
            
            #### üì¶ Available Downloads:
            - `WebLabs-MobIDE-${{ steps.version.outputs.VERSION }}-release.apk` - Production release
            - `WebLabs-MobIDE-${{ steps.version.outputs.VERSION }}-debug.apk` - Debug version
            - `package-info.json` - Build metadata
            
            #### üìã Requirements:
            - Android 10+ (API 29+)
            - ARM64/AArch64 processor
            - 2GB+ free storage
            - Internet connection for setup
            
            **Built:** ${{ steps.version.outputs.BUILD_TIME }}  
            **Commit:** ${{ github.sha }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
  # Test job to ensure quality
  test-apk-package:
    runs-on: ubuntu-latest
    needs: build-and-publish-apk
    
    steps:
      - name: Test Docker package availability
        run: |
          echo "Testing if package is available in GitHub Container Registry..."
          # Note: There might be a delay before the package is available
          sleep 30
          docker pull ghcr.io/spiralgang/weblabs-mobide:latest || echo "Package not yet available (this is normal for new releases)"
          
      - name: Verify package structure
        run: |
          echo "=== Package verification completed ==="
          echo "APK package has been built and published to GitHub Packages"
          echo "Registry: ghcr.io/spiralgang/weblabs-mobide"
          echo "Available for download via Docker or GitHub Releases"