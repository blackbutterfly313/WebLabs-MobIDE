---
name: Universal Mobile DevOps Pipeline

on:
  push:
    branches: [WebOps, master, main]
  pull_request:
    branches: [WebOps, master, main]
  workflow_dispatch:

permissions:
  contents: read
  actions: write
  security-events: write

jobs:
  build-android:
    name: Android ARM64 Build & Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          api-level: 34
          target: default
          arch: arm64-v8a

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build Android App (ARM64)
        run: |
          ./gradlew assembleDebug --info
          ./gradlew assembleRelease --info

      - name: Run Android Tests
        run: ./gradlew test --info

      - name: Archive APK artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android-apks-arm64
          path: |
            app/build/outputs/apk/debug/*.apk
            app/build/outputs/apk/release/*.apk

  test-python-mobile:
    name: Python Mobile Development Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Run Python mobile development tests
        run: |
          if [ -f scripts/test.py ]; then python scripts/test.py; fi
          if [ -f ai_dev_system.py ]; then python -m pytest ai_dev_system.py -v; fi

      - name: Security audit
        run: |
          pip install safety bandit
          safety check
          bandit -r . -f json -o bandit-report.json || true

      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-audit
          path: bandit-report.json

  docker-image:
    name: Build ARM64 Docker Image
    runs-on: ubuntu-latest
    if: hashFiles('Dockerfile') != ''
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push ARM64 Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/arm64,linux/amd64
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:latest
            ghcr.io/${{ github.repository }}:${{ github.sha }}

  mobile-compatibility-test:
    name: Mobile Compatibility & Performance Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js for mobile testing
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run mobile compatibility checks
        run: |
          echo "Running mobile-first compatibility tests..."
          npm run lint
          npm run format

      - name: Test ARM64 compatibility
        run: |
          echo "Testing ARM64/AArch64 compatibility..."
          file copilot-cookbook.js || echo "File utility not available"
          echo "Checking for ARM64-specific optimizations..."

  artifact-collection:
    name: Collect Development Artifacts
    runs-on: ubuntu-latest
    needs: [build-android, test-python-mobile]
    if: always()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Archive comprehensive artifacts
        uses: actions/upload-artifact@v4
        with:
          name: weblabs-mobide-artifacts
          path: |
            copilot-cookbook.js
            QuantumWebIDE.html
            ai_dev_system.py
            requirements.txt
            package.json
            .github/workflows/
        continue-on-error: true
